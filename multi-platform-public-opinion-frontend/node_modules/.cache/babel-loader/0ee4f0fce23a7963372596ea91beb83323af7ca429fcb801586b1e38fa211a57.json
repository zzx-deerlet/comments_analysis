{"ast":null,"code":"import { ref, onMounted, reactive } from 'vue';\nimport { useStore } from 'vuex';\nimport * as echarts from 'echarts';\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const trendChart = ref(null);\n    const sentimentChart = ref(null);\n    const trendTimeRange = ref('day');\n    const stats = reactive({\n      todayCount: 0,\n      todayTrend: 0,\n      positiveCount: 0,\n      neutralCount: 0,\n      negativeCount: 0,\n      platformDistribution: [],\n      hotTopics: []\n    });\n\n    // 初始化趋势图\n    const initTrendChart = () => {\n      const chart = echarts.init(trendChart.value);\n      const option = {\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: ['舆情总量', '正面', '负面']\n        },\n        xAxis: {\n          type: 'category',\n          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          name: '舆情总量',\n          type: 'line',\n          data: [120, 132, 101, 134, 90, 230, 210]\n        }, {\n          name: '正面',\n          type: 'line',\n          data: [220, 182, 191, 234, 290, 330, 310]\n        }, {\n          name: '负面',\n          type: 'line',\n          data: [150, 232, 201, 154, 190, 330, 410]\n        }]\n      };\n      chart.setOption(option);\n    };\n\n    // 初始化情感分布图\n    const initSentimentChart = () => {\n      const chart = echarts.init(sentimentChart.value);\n      const option = {\n        tooltip: {\n          trigger: 'item'\n        },\n        legend: {\n          orient: 'vertical',\n          left: 'left'\n        },\n        series: [{\n          name: '情感分布',\n          type: 'pie',\n          radius: '50%',\n          data: [{\n            value: 1048,\n            name: '正面'\n          }, {\n            value: 735,\n            name: '中性'\n          }, {\n            value: 580,\n            name: '负面'\n          }],\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\n            }\n          }\n        }]\n      };\n      chart.setOption(option);\n    };\n\n    // 获取统计数据\n    const fetchStats = async () => {\n      try {\n        const data = await store.dispatch('opinion/getOpinionStats');\n        Object.assign(stats, data);\n      } catch (error) {\n        console.error('获取统计数据失败:', error);\n      }\n    };\n    onMounted(() => {\n      fetchStats();\n      initTrendChart();\n      initSentimentChart();\n\n      // 监听窗口大小变化，重绘图表\n      window.addEventListener('resize', () => {\n        const trendChartInstance = echarts.getInstanceByDom(trendChart.value);\n        const sentimentChartInstance = echarts.getInstanceByDom(sentimentChart.value);\n        trendChartInstance?.resize();\n        sentimentChartInstance?.resize();\n      });\n    });\n    const __returned__ = {\n      store,\n      trendChart,\n      sentimentChart,\n      trendTimeRange,\n      stats,\n      initTrendChart,\n      initSentimentChart,\n      fetchStats,\n      ref,\n      onMounted,\n      reactive,\n      get useStore() {\n        return useStore;\n      },\n      get echarts() {\n        return echarts;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","reactive","useStore","echarts","store","trendChart","sentimentChart","trendTimeRange","stats","todayCount","todayTrend","positiveCount","neutralCount","negativeCount","platformDistribution","hotTopics","initTrendChart","chart","init","value","option","tooltip","trigger","legend","data","xAxis","type","yAxis","series","name","setOption","initSentimentChart","orient","left","radius","emphasis","itemStyle","shadowBlur","shadowOffsetX","shadowColor","fetchStats","dispatch","Object","assign","error","console","window","addEventListener","trendChartInstance","getInstanceByDom","sentimentChartInstance","resize"],"sources":["D:/a课程/软件工程/OpinionAnalysis/src/views/Dashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard-container\">\r\n    <!-- 数据卡片 -->\r\n    <el-row :gutter=\"20\" class=\"data-cards\">\r\n      <el-col :span=\"6\">\r\n        <el-card shadow=\"hover\">\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <span>今日舆情总量</span>\r\n            </div>\r\n          </template>\r\n          <div class=\"card-content\">\r\n            <h2>{{ stats.todayCount }}</h2>\r\n            <div class=\"trend\">\r\n              <span :class=\"{ 'up': stats.todayTrend > 0, 'down': stats.todayTrend < 0 }\">\r\n                {{ Math.abs(stats.todayTrend) }}%\r\n              </span>\r\n              较昨日\r\n            </div>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n      \r\n      <el-col :span=\"6\">\r\n        <el-card shadow=\"hover\">\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <span>情感分布</span>\r\n            </div>\r\n          </template>\r\n          <div class=\"card-content\">\r\n            <div class=\"sentiment-distribution\">\r\n              <div class=\"sentiment-item\">\r\n                <span class=\"label\">正面</span>\r\n                <span class=\"value\">{{ stats.positiveCount }}</span>\r\n              </div>\r\n              <div class=\"sentiment-item\">\r\n                <span class=\"label\">中性</span>\r\n                <span class=\"value\">{{ stats.neutralCount }}</span>\r\n              </div>\r\n              <div class=\"sentiment-item\">\r\n                <span class=\"label\">负面</span>\r\n                <span class=\"value\">{{ stats.negativeCount }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n      \r\n      <el-col :span=\"6\">\r\n        <el-card shadow=\"hover\">\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <span>平台分布</span>\r\n            </div>\r\n          </template>\r\n          <div class=\"card-content\">\r\n            <div class=\"platform-distribution\">\r\n              <div v-for=\"(item, index) in stats.platformDistribution\" :key=\"index\" class=\"platform-item\">\r\n                <span class=\"label\">{{ item.platform }}</span>\r\n                <span class=\"value\">{{ item.count }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n      \r\n      <el-col :span=\"6\">\r\n        <el-card shadow=\"hover\">\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <span>热点话题</span>\r\n            </div>\r\n          </template>\r\n          <div class=\"card-content\">\r\n            <div class=\"hot-topics\">\r\n              <div v-for=\"(topic, index) in stats.hotTopics\" :key=\"index\" class=\"topic-item\">\r\n                <span class=\"rank\">{{ index + 1 }}</span>\r\n                <span class=\"name\">{{ topic.name }}</span>\r\n                <span class=\"count\">{{ topic.count }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n    \r\n    <!-- 图表区域 -->\r\n    <el-row :gutter=\"20\" class=\"charts-container\">\r\n      <el-col :span=\"16\">\r\n        <el-card shadow=\"hover\">\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <span>舆情趋势</span>\r\n              <el-radio-group v-model=\"trendTimeRange\" size=\"small\">\r\n                <el-radio-button label=\"day\">日</el-radio-button>\r\n                <el-radio-button label=\"week\">周</el-radio-button>\r\n                <el-radio-button label=\"month\">月</el-radio-button>\r\n              </el-radio-group>\r\n            </div>\r\n          </template>\r\n          <div class=\"chart\" ref=\"trendChart\"></div>\r\n        </el-card>\r\n      </el-col>\r\n      \r\n      <el-col :span=\"8\">\r\n        <el-card shadow=\"hover\">\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <span>情感分布</span>\r\n            </div>\r\n          </template>\r\n          <div class=\"chart\" ref=\"sentimentChart\"></div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, reactive } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport * as echarts from 'echarts'\r\n\r\nconst store = useStore()\r\nconst trendChart = ref(null)\r\nconst sentimentChart = ref(null)\r\nconst trendTimeRange = ref('day')\r\n\r\nconst stats = reactive({\r\n  todayCount: 0,\r\n  todayTrend: 0,\r\n  positiveCount: 0,\r\n  neutralCount: 0,\r\n  negativeCount: 0,\r\n  platformDistribution: [],\r\n  hotTopics: []\r\n})\r\n\r\n// 初始化趋势图\r\nconst initTrendChart = () => {\r\n  const chart = echarts.init(trendChart.value)\r\n  const option = {\r\n    tooltip: {\r\n      trigger: 'axis'\r\n    },\r\n    legend: {\r\n      data: ['舆情总量', '正面', '负面']\r\n    },\r\n    xAxis: {\r\n      type: 'category',\r\n      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n    },\r\n    yAxis: {\r\n      type: 'value'\r\n    },\r\n    series: [\r\n      {\r\n        name: '舆情总量',\r\n        type: 'line',\r\n        data: [120, 132, 101, 134, 90, 230, 210]\r\n      },\r\n      {\r\n        name: '正面',\r\n        type: 'line',\r\n        data: [220, 182, 191, 234, 290, 330, 310]\r\n      },\r\n      {\r\n        name: '负面',\r\n        type: 'line',\r\n        data: [150, 232, 201, 154, 190, 330, 410]\r\n      }\r\n    ]\r\n  }\r\n  chart.setOption(option)\r\n}\r\n\r\n// 初始化情感分布图\r\nconst initSentimentChart = () => {\r\n  const chart = echarts.init(sentimentChart.value)\r\n  const option = {\r\n    tooltip: {\r\n      trigger: 'item'\r\n    },\r\n    legend: {\r\n      orient: 'vertical',\r\n      left: 'left'\r\n    },\r\n    series: [\r\n      {\r\n        name: '情感分布',\r\n        type: 'pie',\r\n        radius: '50%',\r\n        data: [\r\n          { value: 1048, name: '正面' },\r\n          { value: 735, name: '中性' },\r\n          { value: 580, name: '负面' }\r\n        ],\r\n        emphasis: {\r\n          itemStyle: {\r\n            shadowBlur: 10,\r\n            shadowOffsetX: 0,\r\n            shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n  chart.setOption(option)\r\n}\r\n\r\n// 获取统计数据\r\nconst fetchStats = async () => {\r\n  try {\r\n    const data = await store.dispatch('opinion/getOpinionStats')\r\n    Object.assign(stats, data)\r\n  } catch (error) {\r\n    console.error('获取统计数据失败:', error)\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  fetchStats()\r\n  initTrendChart()\r\n  initSentimentChart()\r\n  \r\n  // 监听窗口大小变化，重绘图表\r\n  window.addEventListener('resize', () => {\r\n    const trendChartInstance = echarts.getInstanceByDom(trendChart.value)\r\n    const sentimentChartInstance = echarts.getInstanceByDom(sentimentChart.value)\r\n    trendChartInstance?.resize()\r\n    sentimentChartInstance?.resize()\r\n  })\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.dashboard-container {\r\n  .data-cards {\r\n    margin-bottom: 20px;\r\n    \r\n    .card-header {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n    }\r\n    \r\n    .card-content {\r\n      text-align: center;\r\n      \r\n      h2 {\r\n        margin: 10px 0;\r\n        font-size: 24px;\r\n      }\r\n      \r\n      .trend {\r\n        font-size: 14px;\r\n        color: #909399;\r\n        \r\n        .up {\r\n          color: #67C23A;\r\n        }\r\n        \r\n        .down {\r\n          color: #F56C6C;\r\n        }\r\n      }\r\n      \r\n      .sentiment-distribution,\r\n      .platform-distribution {\r\n        .sentiment-item,\r\n        .platform-item {\r\n          display: flex;\r\n          justify-content: space-between;\r\n          margin: 10px 0;\r\n          \r\n          .label {\r\n            color: #606266;\r\n          }\r\n          \r\n          .value {\r\n            font-weight: bold;\r\n          }\r\n        }\r\n      }\r\n      \r\n      .hot-topics {\r\n        .topic-item {\r\n          display: flex;\r\n          align-items: center;\r\n          margin: 10px 0;\r\n          \r\n          .rank {\r\n            width: 20px;\r\n            height: 20px;\r\n            line-height: 20px;\r\n            text-align: center;\r\n            background-color: #f0f2f5;\r\n            border-radius: 4px;\r\n            margin-right: 10px;\r\n          }\r\n          \r\n          .name {\r\n            flex: 1;\r\n            margin-right: 10px;\r\n          }\r\n          \r\n          .count {\r\n            color: #909399;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  .charts-container {\r\n    .chart {\r\n      height: 400px;\r\n    }\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}