{"ast":null,"code":"import { ref, reactive } from 'vue';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nexport default {\n  __name: 'Search',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const searchFormRef = ref(null);\n    const loading = ref(false);\n    const detailDialogVisible = ref(false);\n    const currentDetail = ref(null);\n\n    // 分页相关\n    const currentPage = ref(1);\n    const pageSize = ref(10);\n    const total = ref(0);\n\n    // 搜索表单数据\n    const searchForm = reactive({\n      keyword: '',\n      platform: '',\n      sentiment: '',\n      dateRange: []\n    });\n\n    // 平台选项\n    const platformOptions = [{\n      label: '微博',\n      value: 'weibo'\n    }, {\n      label: '微信',\n      value: 'wechat'\n    }, {\n      label: '知乎',\n      value: 'zhihu'\n    }, {\n      label: 'B站',\n      value: 'bilibili'\n    }];\n\n    // 情感倾向选项\n    const sentimentOptions = [{\n      label: '正面',\n      value: 'positive'\n    }, {\n      label: '中性',\n      value: 'neutral'\n    }, {\n      label: '负面',\n      value: 'negative'\n    }];\n\n    // 获取情感标签类型\n    const getSentimentType = sentiment => {\n      const types = {\n        positive: 'success',\n        neutral: 'info',\n        negative: 'danger'\n      };\n      return types[sentiment] || 'info';\n    };\n\n    // 获取情感标签文本\n    const getSentimentLabel = sentiment => {\n      const labels = {\n        positive: '正面',\n        neutral: '中性',\n        negative: '负面'\n      };\n      return labels[sentiment] || '未知';\n    };\n\n    // 搜索结果数据\n    const opinionList = ref([]);\n\n    // 搜索方法\n    const handleSearch = () => {\n      currentPage.value = 1;\n      fetchData();\n    };\n\n    // 重置搜索\n    const handleReset = () => {\n      searchFormRef.value?.resetFields();\n      handleSearch();\n    };\n\n    // 获取数据\n    const fetchData = async () => {\n      loading.value = true;\n      try {\n        const params = {\n          ...searchForm,\n          page: currentPage.value,\n          pageSize: pageSize.value,\n          startDate: searchForm.dateRange?.[0],\n          endDate: searchForm.dateRange?.[1]\n        };\n        const {\n          list,\n          total: totalCount\n        } = await store.dispatch('opinion/searchOpinions', params);\n        opinionList.value = list;\n        total.value = totalCount;\n      } catch (error) {\n        ElMessage.error('获取数据失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 查看详情\n    const handleViewDetail = async row => {\n      try {\n        const detail = await store.dispatch('opinion/getOpinionDetail', row.id);\n        currentDetail.value = detail;\n        detailDialogVisible.value = true;\n      } catch (error) {\n        ElMessage.error('获取详情失败');\n      }\n    };\n\n    // 导出数据\n    const handleExport = async () => {\n      try {\n        const params = {\n          ...searchForm,\n          startDate: searchForm.dateRange?.[0],\n          endDate: searchForm.dateRange?.[1]\n        };\n        await store.dispatch('opinion/exportOpinions', params);\n        ElMessage.success('导出成功');\n      } catch (error) {\n        ElMessage.error('导出失败');\n      }\n    };\n\n    // 分页方法\n    const handleSizeChange = val => {\n      pageSize.value = val;\n      fetchData();\n    };\n    const handleCurrentChange = val => {\n      currentPage.value = val;\n      fetchData();\n    };\n\n    // 初始化\n    fetchData();\n    const __returned__ = {\n      store,\n      searchFormRef,\n      loading,\n      detailDialogVisible,\n      currentDetail,\n      currentPage,\n      pageSize,\n      total,\n      searchForm,\n      platformOptions,\n      sentimentOptions,\n      getSentimentType,\n      getSentimentLabel,\n      opinionList,\n      handleSearch,\n      handleReset,\n      fetchData,\n      handleViewDetail,\n      handleExport,\n      handleSizeChange,\n      handleCurrentChange,\n      ref,\n      reactive,\n      get useStore() {\n        return useStore;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","useStore","ElMessage","store","searchFormRef","loading","detailDialogVisible","currentDetail","currentPage","pageSize","total","searchForm","keyword","platform","sentiment","dateRange","platformOptions","label","value","sentimentOptions","getSentimentType","types","positive","neutral","negative","getSentimentLabel","labels","opinionList","handleSearch","fetchData","handleReset","resetFields","params","page","startDate","endDate","list","totalCount","dispatch","error","handleViewDetail","row","detail","id","handleExport","success","handleSizeChange","val","handleCurrentChange"],"sources":["D:/a课程/软件工程/OpinionAnalysis/src/views/Search.vue"],"sourcesContent":["<template>\r\n  <div class=\"search-container\">\r\n    <!-- 搜索表单 -->\r\n    <el-card class=\"search-form\">\r\n      <el-form :model=\"searchForm\" ref=\"searchFormRef\" :inline=\"true\">\r\n        <el-form-item label=\"关键词\">\r\n          <el-input\r\n            v-model=\"searchForm.keyword\"\r\n            placeholder=\"请输入关键词\"\r\n            clearable\r\n            @keyup.enter=\"handleSearch\"\r\n          />\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"平台\">\r\n          <el-select v-model=\"searchForm.platform\" placeholder=\"请选择平台\" clearable>\r\n            <el-option\r\n              v-for=\"item in platformOptions\"\r\n              :key=\"item.value\"\r\n              :label=\"item.label\"\r\n              :value=\"item.value\"\r\n            />\r\n          </el-select>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"情感倾向\">\r\n          <el-select v-model=\"searchForm.sentiment\" placeholder=\"请选择情感倾向\" clearable>\r\n            <el-option\r\n              v-for=\"item in sentimentOptions\"\r\n              :key=\"item.value\"\r\n              :label=\"item.label\"\r\n              :value=\"item.value\"\r\n            />\r\n          </el-select>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"时间范围\">\r\n          <el-date-picker\r\n            v-model=\"searchForm.dateRange\"\r\n            type=\"daterange\"\r\n            range-separator=\"至\"\r\n            start-placeholder=\"开始日期\"\r\n            end-placeholder=\"结束日期\"\r\n            value-format=\"YYYY-MM-DD\"\r\n          />\r\n        </el-form-item>\r\n        \r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"handleSearch\">搜索</el-button>\r\n          <el-button @click=\"handleReset\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n    \r\n    <!-- 搜索结果 -->\r\n    <el-card class=\"search-results\">\r\n      <template #header>\r\n        <div class=\"results-header\">\r\n          <span>搜索结果</span>\r\n          <el-button type=\"primary\" @click=\"handleExport\">导出数据</el-button>\r\n        </div>\r\n      </template>\r\n      \r\n      <el-table\r\n        v-loading=\"loading\"\r\n        :data=\"opinionList\"\r\n        style=\"width: 100%\"\r\n        border\r\n      >\r\n        <el-table-column prop=\"platform\" label=\"平台\" width=\"100\" />\r\n        <el-table-column prop=\"content\" label=\"内容\" show-overflow-tooltip />\r\n        <el-table-column prop=\"sentiment\" label=\"情感倾向\" width=\"100\">\r\n          <template #default=\"{ row }\">\r\n            <el-tag :type=\"getSentimentType(row.sentiment)\">\r\n              {{ getSentimentLabel(row.sentiment) }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"keywords\" label=\"关键词\" width=\"200\">\r\n          <template #default=\"{ row }\">\r\n            <el-tag\r\n              v-for=\"keyword in row.keywords\"\r\n              :key=\"keyword\"\r\n              size=\"small\"\r\n              class=\"keyword-tag\"\r\n            >\r\n              {{ keyword }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"publishTime\" label=\"发布时间\" width=\"180\" />\r\n        <el-table-column label=\"操作\" width=\"120\" fixed=\"right\">\r\n          <template #default=\"{ row }\">\r\n            <el-button\r\n              type=\"text\"\r\n              size=\"small\"\r\n              @click=\"handleViewDetail(row)\"\r\n            >\r\n              查看详情\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      \r\n      <!-- 分页 -->\r\n      <div class=\"pagination-container\">\r\n        <el-pagination\r\n          v-model:current-page=\"currentPage\"\r\n          v-model:page-size=\"pageSize\"\r\n          :page-sizes=\"[10, 20, 50, 100]\"\r\n          :total=\"total\"\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          @size-change=\"handleSizeChange\"\r\n          @current-change=\"handleCurrentChange\"\r\n        />\r\n      </div>\r\n    </el-card>\r\n    \r\n    <!-- 详情对话框 -->\r\n    <el-dialog\r\n      v-model=\"detailDialogVisible\"\r\n      title=\"舆情详情\"\r\n      width=\"60%\"\r\n    >\r\n      <div v-if=\"currentDetail\" class=\"detail-content\">\r\n        <div class=\"detail-item\">\r\n          <span class=\"label\">平台：</span>\r\n          <span>{{ currentDetail.platform }}</span>\r\n        </div>\r\n        <div class=\"detail-item\">\r\n          <span class=\"label\">发布时间：</span>\r\n          <span>{{ currentDetail.publishTime }}</span>\r\n        </div>\r\n        <div class=\"detail-item\">\r\n          <span class=\"label\">情感倾向：</span>\r\n          <el-tag :type=\"getSentimentType(currentDetail.sentiment)\">\r\n            {{ getSentimentLabel(currentDetail.sentiment) }}\r\n          </el-tag>\r\n        </div>\r\n        <div class=\"detail-item\">\r\n          <span class=\"label\">关键词：</span>\r\n          <el-tag\r\n            v-for=\"keyword in currentDetail.keywords\"\r\n            :key=\"keyword\"\r\n            size=\"small\"\r\n            class=\"keyword-tag\"\r\n          >\r\n            {{ keyword }}\r\n          </el-tag>\r\n        </div>\r\n        <div class=\"detail-item\">\r\n          <span class=\"label\">内容：</span>\r\n          <div class=\"content\">{{ currentDetail.content }}</div>\r\n        </div>\r\n        <div class=\"detail-item\">\r\n          <span class=\"label\">互动数据：</span>\r\n          <div class=\"interaction-data\">\r\n            <span>评论：{{ currentDetail.replyCount }}</span>\r\n            <span>转发：{{ currentDetail.forwardCount }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nconst store = useStore()\r\nconst searchFormRef = ref(null)\r\nconst loading = ref(false)\r\nconst detailDialogVisible = ref(false)\r\nconst currentDetail = ref(null)\r\n\r\n// 分页相关\r\nconst currentPage = ref(1)\r\nconst pageSize = ref(10)\r\nconst total = ref(0)\r\n\r\n// 搜索表单数据\r\nconst searchForm = reactive({\r\n  keyword: '',\r\n  platform: '',\r\n  sentiment: '',\r\n  dateRange: []\r\n})\r\n\r\n// 平台选项\r\nconst platformOptions = [\r\n  { label: '微博', value: 'weibo' },\r\n  { label: '微信', value: 'wechat' },\r\n  { label: '知乎', value: 'zhihu' },\r\n  { label: 'B站', value: 'bilibili' }\r\n]\r\n\r\n// 情感倾向选项\r\nconst sentimentOptions = [\r\n  { label: '正面', value: 'positive' },\r\n  { label: '中性', value: 'neutral' },\r\n  { label: '负面', value: 'negative' }\r\n]\r\n\r\n// 获取情感标签类型\r\nconst getSentimentType = (sentiment) => {\r\n  const types = {\r\n    positive: 'success',\r\n    neutral: 'info',\r\n    negative: 'danger'\r\n  }\r\n  return types[sentiment] || 'info'\r\n}\r\n\r\n// 获取情感标签文本\r\nconst getSentimentLabel = (sentiment) => {\r\n  const labels = {\r\n    positive: '正面',\r\n    neutral: '中性',\r\n    negative: '负面'\r\n  }\r\n  return labels[sentiment] || '未知'\r\n}\r\n\r\n// 搜索结果数据\r\nconst opinionList = ref([])\r\n\r\n// 搜索方法\r\nconst handleSearch = () => {\r\n  currentPage.value = 1\r\n  fetchData()\r\n}\r\n\r\n// 重置搜索\r\nconst handleReset = () => {\r\n  searchFormRef.value?.resetFields()\r\n  handleSearch()\r\n}\r\n\r\n// 获取数据\r\nconst fetchData = async () => {\r\n  loading.value = true\r\n  try {\r\n    const params = {\r\n      ...searchForm,\r\n      page: currentPage.value,\r\n      pageSize: pageSize.value,\r\n      startDate: searchForm.dateRange?.[0],\r\n      endDate: searchForm.dateRange?.[1]\r\n    }\r\n    \r\n    const { list, total: totalCount } = await store.dispatch('opinion/searchOpinions', params)\r\n    opinionList.value = list\r\n    total.value = totalCount\r\n  } catch (error) {\r\n    ElMessage.error('获取数据失败')\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 查看详情\r\nconst handleViewDetail = async (row) => {\r\n  try {\r\n    const detail = await store.dispatch('opinion/getOpinionDetail', row.id)\r\n    currentDetail.value = detail\r\n    detailDialogVisible.value = true\r\n  } catch (error) {\r\n    ElMessage.error('获取详情失败')\r\n  }\r\n}\r\n\r\n// 导出数据\r\nconst handleExport = async () => {\r\n  try {\r\n    const params = {\r\n      ...searchForm,\r\n      startDate: searchForm.dateRange?.[0],\r\n      endDate: searchForm.dateRange?.[1]\r\n    }\r\n    await store.dispatch('opinion/exportOpinions', params)\r\n    ElMessage.success('导出成功')\r\n  } catch (error) {\r\n    ElMessage.error('导出失败')\r\n  }\r\n}\r\n\r\n// 分页方法\r\nconst handleSizeChange = (val) => {\r\n  pageSize.value = val\r\n  fetchData()\r\n}\r\n\r\nconst handleCurrentChange = (val) => {\r\n  currentPage.value = val\r\n  fetchData()\r\n}\r\n\r\n// 初始化\r\nfetchData()\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.search-container {\r\n  .search-form {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .search-results {\r\n    .results-header {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n    }\r\n    \r\n    .keyword-tag {\r\n      margin-right: 5px;\r\n    }\r\n    \r\n    .pagination-container {\r\n      margin-top: 20px;\r\n      text-align: right;\r\n    }\r\n  }\r\n  \r\n  .detail-content {\r\n    .detail-item {\r\n      margin-bottom: 15px;\r\n      \r\n      .label {\r\n        font-weight: bold;\r\n        margin-right: 10px;\r\n      }\r\n      \r\n      .content {\r\n        margin-top: 10px;\r\n        line-height: 1.6;\r\n      }\r\n      \r\n      .interaction-data {\r\n        span {\r\n          margin-right: 20px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}