{"ast":null,"code":"import { ref, reactive } from 'vue';\nimport { useStore } from 'vuex';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nexport default {\n  __name: 'User',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const loading = ref(false);\n    const dialogVisible = ref(false);\n    const dialogType = ref('add');\n    const userFormRef = ref(null);\n\n    // 搜索表单\n    const searchForm = reactive({\n      username: '',\n      role: ''\n    });\n\n    // 用户表单\n    const userForm = reactive({\n      username: '',\n      password: '',\n      email: '',\n      role: 'user'\n    });\n\n    // 表单验证规则\n    const userRules = {\n      username: [{\n        required: true,\n        message: '请输入用户名',\n        trigger: 'blur'\n      }, {\n        min: 3,\n        max: 20,\n        message: '长度在 3 到 20 个字符',\n        trigger: 'blur'\n      }],\n      password: [{\n        required: true,\n        message: '请输入密码',\n        trigger: 'blur'\n      }, {\n        min: 6,\n        message: '密码长度不能小于6位',\n        trigger: 'blur'\n      }],\n      email: [{\n        required: true,\n        message: '请输入邮箱地址',\n        trigger: 'blur'\n      }, {\n        type: 'email',\n        message: '请输入正确的邮箱地址',\n        trigger: 'blur'\n      }],\n      role: [{\n        required: true,\n        message: '请选择角色',\n        trigger: 'change'\n      }]\n    };\n\n    // 分页相关\n    const currentPage = ref(1);\n    const pageSize = ref(10);\n    const total = ref(0);\n\n    // 用户列表数据\n    const userList = ref([]);\n\n    // 获取用户列表\n    const fetchUserList = async () => {\n      loading.value = true;\n      try {\n        const params = {\n          ...searchForm,\n          page: currentPage.value,\n          pageSize: pageSize.value\n        };\n        const {\n          list,\n          total: totalCount\n        } = await store.dispatch('user/getUserList', params);\n        userList.value = list;\n        total.value = totalCount;\n      } catch (error) {\n        ElMessage.error('获取用户列表失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 搜索\n    const handleSearch = () => {\n      currentPage.value = 1;\n      fetchUserList();\n    };\n\n    // 重置搜索\n    const handleReset = () => {\n      searchForm.username = '';\n      searchForm.role = '';\n      handleSearch();\n    };\n\n    // 添加用户\n    const handleAdd = () => {\n      dialogType.value = 'add';\n      userForm.username = '';\n      userForm.password = '';\n      userForm.email = '';\n      userForm.role = 'user';\n      dialogVisible.value = true;\n    };\n\n    // 编辑用户\n    const handleEdit = row => {\n      dialogType.value = 'edit';\n      Object.assign(userForm, row);\n      dialogVisible.value = true;\n    };\n\n    // 删除用户\n    const handleDelete = row => {\n      ElMessageBox.confirm('确定要删除该用户吗？', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          await store.dispatch('user/deleteUser', row.id);\n          ElMessage.success('删除成功');\n          fetchUserList();\n        } catch (error) {\n          ElMessage.error('删除失败');\n        }\n      });\n    };\n\n    // 提交表单\n    const handleSubmit = () => {\n      userFormRef.value?.validate(async valid => {\n        if (valid) {\n          try {\n            if (dialogType.value === 'add') {\n              await store.dispatch('user/addUser', userForm);\n              ElMessage.success('添加成功');\n            } else {\n              await store.dispatch('user/updateUser', userForm);\n              ElMessage.success('更新成功');\n            }\n            dialogVisible.value = false;\n            fetchUserList();\n          } catch (error) {\n            ElMessage.error(dialogType.value === 'add' ? '添加失败' : '更新失败');\n          }\n        }\n      });\n    };\n\n    // 分页方法\n    const handleSizeChange = val => {\n      pageSize.value = val;\n      fetchUserList();\n    };\n    const handleCurrentChange = val => {\n      currentPage.value = val;\n      fetchUserList();\n    };\n\n    // 初始化\n    fetchUserList();\n    const __returned__ = {\n      store,\n      loading,\n      dialogVisible,\n      dialogType,\n      userFormRef,\n      searchForm,\n      userForm,\n      userRules,\n      currentPage,\n      pageSize,\n      total,\n      userList,\n      fetchUserList,\n      handleSearch,\n      handleReset,\n      handleAdd,\n      handleEdit,\n      handleDelete,\n      handleSubmit,\n      handleSizeChange,\n      handleCurrentChange,\n      ref,\n      reactive,\n      get useStore() {\n        return useStore;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","useStore","ElMessage","ElMessageBox","store","loading","dialogVisible","dialogType","userFormRef","searchForm","username","role","userForm","password","email","userRules","required","message","trigger","min","max","type","currentPage","pageSize","total","userList","fetchUserList","value","params","page","list","totalCount","dispatch","error","handleSearch","handleReset","handleAdd","handleEdit","row","Object","assign","handleDelete","confirm","confirmButtonText","cancelButtonText","then","id","success","handleSubmit","validate","valid","handleSizeChange","val","handleCurrentChange"],"sources":["D:/a课程/软件工程/OpinionAnalysis/src/views/User.vue"],"sourcesContent":["<template>\r\n  <div class=\"user-container\">\r\n    <el-card>\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <span>用户管理</span>\r\n          <el-button type=\"primary\" @click=\"handleAdd\">添加用户</el-button>\r\n        </div>\r\n      </template>\r\n      \r\n      <!-- 搜索栏 -->\r\n      <el-form :inline=\"true\" :model=\"searchForm\" class=\"search-form\">\r\n        <el-form-item label=\"用户名\">\r\n          <el-input v-model=\"searchForm.username\" placeholder=\"请输入用户名\" clearable />\r\n        </el-form-item>\r\n        <el-form-item label=\"角色\">\r\n          <el-select v-model=\"searchForm.role\" placeholder=\"请选择角色\" clearable>\r\n            <el-option label=\"管理员\" value=\"admin\" />\r\n            <el-option label=\"普通用户\" value=\"user\" />\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"handleSearch\">搜索</el-button>\r\n          <el-button @click=\"handleReset\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n      \r\n      <!-- 用户列表 -->\r\n      <el-table\r\n        v-loading=\"loading\"\r\n        :data=\"userList\"\r\n        style=\"width: 100%\"\r\n        border\r\n      >\r\n        <el-table-column prop=\"username\" label=\"用户名\" />\r\n        <el-table-column prop=\"email\" label=\"邮箱\" />\r\n        <el-table-column prop=\"role\" label=\"角色\">\r\n          <template #default=\"{ row }\">\r\n            <el-tag :type=\"row.role === 'admin' ? 'danger' : 'success'\">\r\n              {{ row.role === 'admin' ? '管理员' : '普通用户' }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"createTime\" label=\"创建时间\" width=\"180\" />\r\n        <el-table-column prop=\"lastLoginTime\" label=\"最后登录时间\" width=\"180\" />\r\n        <el-table-column label=\"操作\" width=\"200\" fixed=\"right\">\r\n          <template #default=\"{ row }\">\r\n            <el-button\r\n              type=\"primary\"\r\n              link\r\n              @click=\"handleEdit(row)\"\r\n            >\r\n              编辑\r\n            </el-button>\r\n            <el-button\r\n              type=\"danger\"\r\n              link\r\n              @click=\"handleDelete(row)\"\r\n            >\r\n              删除\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      \r\n      <!-- 分页 -->\r\n      <div class=\"pagination-container\">\r\n        <el-pagination\r\n          v-model:current-page=\"currentPage\"\r\n          v-model:page-size=\"pageSize\"\r\n          :page-sizes=\"[10, 20, 50, 100]\"\r\n          :total=\"total\"\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          @size-change=\"handleSizeChange\"\r\n          @current-change=\"handleCurrentChange\"\r\n        />\r\n      </div>\r\n    </el-card>\r\n    \r\n    <!-- 用户表单对话框 -->\r\n    <el-dialog\r\n      v-model=\"dialogVisible\"\r\n      :title=\"dialogType === 'add' ? '添加用户' : '编辑用户'\"\r\n      width=\"500px\"\r\n    >\r\n      <el-form\r\n        ref=\"userFormRef\"\r\n        :model=\"userForm\"\r\n        :rules=\"userRules\"\r\n        label-width=\"80px\"\r\n      >\r\n        <el-form-item label=\"用户名\" prop=\"username\">\r\n          <el-input v-model=\"userForm.username\" :disabled=\"dialogType === 'edit'\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\" prop=\"password\" v-if=\"dialogType === 'add'\">\r\n          <el-input v-model=\"userForm.password\" type=\"password\" show-password />\r\n        </el-form-item>\r\n        <el-form-item label=\"邮箱\" prop=\"email\">\r\n          <el-input v-model=\"userForm.email\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"角色\" prop=\"role\">\r\n          <el-select v-model=\"userForm.role\" placeholder=\"请选择角色\">\r\n            <el-option label=\"管理员\" value=\"admin\" />\r\n            <el-option label=\"普通用户\" value=\"user\" />\r\n          </el-select>\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n          <el-button type=\"primary\" @click=\"handleSubmit\">确定</el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { ElMessage, ElMessageBox } from 'element-plus'\r\n\r\nconst store = useStore()\r\nconst loading = ref(false)\r\nconst dialogVisible = ref(false)\r\nconst dialogType = ref('add')\r\nconst userFormRef = ref(null)\r\n\r\n// 搜索表单\r\nconst searchForm = reactive({\r\n  username: '',\r\n  role: ''\r\n})\r\n\r\n// 用户表单\r\nconst userForm = reactive({\r\n  username: '',\r\n  password: '',\r\n  email: '',\r\n  role: 'user'\r\n})\r\n\r\n// 表单验证规则\r\nconst userRules = {\r\n  username: [\r\n    { required: true, message: '请输入用户名', trigger: 'blur' },\r\n    { min: 3, max: 20, message: '长度在 3 到 20 个字符', trigger: 'blur' }\r\n  ],\r\n  password: [\r\n    { required: true, message: '请输入密码', trigger: 'blur' },\r\n    { min: 6, message: '密码长度不能小于6位', trigger: 'blur' }\r\n  ],\r\n  email: [\r\n    { required: true, message: '请输入邮箱地址', trigger: 'blur' },\r\n    { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' }\r\n  ],\r\n  role: [\r\n    { required: true, message: '请选择角色', trigger: 'change' }\r\n  ]\r\n}\r\n\r\n// 分页相关\r\nconst currentPage = ref(1)\r\nconst pageSize = ref(10)\r\nconst total = ref(0)\r\n\r\n// 用户列表数据\r\nconst userList = ref([])\r\n\r\n// 获取用户列表\r\nconst fetchUserList = async () => {\r\n  loading.value = true\r\n  try {\r\n    const params = {\r\n      ...searchForm,\r\n      page: currentPage.value,\r\n      pageSize: pageSize.value\r\n    }\r\n    const { list, total: totalCount } = await store.dispatch('user/getUserList', params)\r\n    userList.value = list\r\n    total.value = totalCount\r\n  } catch (error) {\r\n    ElMessage.error('获取用户列表失败')\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 搜索\r\nconst handleSearch = () => {\r\n  currentPage.value = 1\r\n  fetchUserList()\r\n}\r\n\r\n// 重置搜索\r\nconst handleReset = () => {\r\n  searchForm.username = ''\r\n  searchForm.role = ''\r\n  handleSearch()\r\n}\r\n\r\n// 添加用户\r\nconst handleAdd = () => {\r\n  dialogType.value = 'add'\r\n  userForm.username = ''\r\n  userForm.password = ''\r\n  userForm.email = ''\r\n  userForm.role = 'user'\r\n  dialogVisible.value = true\r\n}\r\n\r\n// 编辑用户\r\nconst handleEdit = (row) => {\r\n  dialogType.value = 'edit'\r\n  Object.assign(userForm, row)\r\n  dialogVisible.value = true\r\n}\r\n\r\n// 删除用户\r\nconst handleDelete = (row) => {\r\n  ElMessageBox.confirm(\r\n    '确定要删除该用户吗？',\r\n    '警告',\r\n    {\r\n      confirmButtonText: '确定',\r\n      cancelButtonText: '取消',\r\n      type: 'warning'\r\n    }\r\n  ).then(async () => {\r\n    try {\r\n      await store.dispatch('user/deleteUser', row.id)\r\n      ElMessage.success('删除成功')\r\n      fetchUserList()\r\n    } catch (error) {\r\n      ElMessage.error('删除失败')\r\n    }\r\n  })\r\n}\r\n\r\n// 提交表单\r\nconst handleSubmit = () => {\r\n  userFormRef.value?.validate(async (valid) => {\r\n    if (valid) {\r\n      try {\r\n        if (dialogType.value === 'add') {\r\n          await store.dispatch('user/addUser', userForm)\r\n          ElMessage.success('添加成功')\r\n        } else {\r\n          await store.dispatch('user/updateUser', userForm)\r\n          ElMessage.success('更新成功')\r\n        }\r\n        dialogVisible.value = false\r\n        fetchUserList()\r\n      } catch (error) {\r\n        ElMessage.error(dialogType.value === 'add' ? '添加失败' : '更新失败')\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// 分页方法\r\nconst handleSizeChange = (val) => {\r\n  pageSize.value = val\r\n  fetchUserList()\r\n}\r\n\r\nconst handleCurrentChange = (val) => {\r\n  currentPage.value = val\r\n  fetchUserList()\r\n}\r\n\r\n// 初始化\r\nfetchUserList()\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.user-container {\r\n  padding: 20px;\r\n  \r\n  .card-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n  \r\n  .search-form {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .pagination-container {\r\n    margin-top: 20px;\r\n    text-align: right;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}