{"ast":null,"code":"import { ref, reactive } from 'vue';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nexport default {\n  __name: 'Export',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const exportFormRef = ref(null);\n    const loading = ref(false);\n    const exporting = ref(false);\n\n    // 导出表单数据\n    const exportForm = reactive({\n      range: 'all',\n      keyword: '',\n      platform: '',\n      sentiment: '',\n      dateRange: [],\n      fields: ['platform', 'content', 'sentiment', 'keywords', 'publishTime'],\n      format: 'excel'\n    });\n\n    // 平台选项\n    const platformOptions = [{\n      label: '微博',\n      value: 'weibo'\n    }, {\n      label: '微信',\n      value: 'wechat'\n    }, {\n      label: '知乎',\n      value: 'zhihu'\n    }, {\n      label: 'B站',\n      value: 'bilibili'\n    }];\n\n    // 情感倾向选项\n    const sentimentOptions = [{\n      label: '正面',\n      value: 'positive'\n    }, {\n      label: '中性',\n      value: 'neutral'\n    }, {\n      label: '负面',\n      value: 'negative'\n    }];\n\n    // 导出历史数据\n    const exportHistory = ref([]);\n\n    // 获取导出历史\n    const fetchExportHistory = async () => {\n      loading.value = true;\n      try {\n        // 这里应该调用获取导出历史的API\n        // const data = await store.dispatch('opinion/getExportHistory')\n        // exportHistory.value = data\n\n        // 模拟数据\n        exportHistory.value = [{\n          fileName: '舆情数据_20240101_20240131.xlsx',\n          createTime: '2024-01-31 15:30:00',\n          fileSize: '2.5MB',\n          status: 'success'\n        }, {\n          fileName: '舆情数据_20231201_20231231.xlsx',\n          createTime: '2023-12-31 16:45:00',\n          fileSize: '3.1MB',\n          status: 'success'\n        }];\n      } catch (error) {\n        ElMessage.error('获取导出历史失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 刷新历史记录\n    const refreshHistory = () => {\n      fetchExportHistory();\n    };\n\n    // 导出数据\n    const handleExport = async () => {\n      if (!exportForm.fields.length) {\n        ElMessage.warning('请选择导出字段');\n        return;\n      }\n      exporting.value = true;\n      try {\n        const params = {\n          ...exportForm,\n          startDate: exportForm.dateRange?.[0],\n          endDate: exportForm.dateRange?.[1]\n        };\n        await store.dispatch('opinion/exportOpinions', params);\n        ElMessage.success('导出成功');\n        refreshHistory();\n      } catch (error) {\n        ElMessage.error('导出失败');\n      } finally {\n        exporting.value = false;\n      }\n    };\n\n    // 下载文件\n    const handleDownload = row => {\n      // 这里应该调用下载文件的API\n      // store.dispatch('opinion/downloadExportFile', row.fileName)\n      ElMessage.success('开始下载');\n    };\n\n    // 初始化\n    fetchExportHistory();\n    const __returned__ = {\n      store,\n      exportFormRef,\n      loading,\n      exporting,\n      exportForm,\n      platformOptions,\n      sentimentOptions,\n      exportHistory,\n      fetchExportHistory,\n      refreshHistory,\n      handleExport,\n      handleDownload,\n      ref,\n      reactive,\n      get useStore() {\n        return useStore;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","useStore","ElMessage","store","exportFormRef","loading","exporting","exportForm","range","keyword","platform","sentiment","dateRange","fields","format","platformOptions","label","value","sentimentOptions","exportHistory","fetchExportHistory","fileName","createTime","fileSize","status","error","refreshHistory","handleExport","length","warning","params","startDate","endDate","dispatch","success","handleDownload","row"],"sources":["D:/a课程/软件工程/OpinionAnalysis/src/views/Export.vue"],"sourcesContent":["<template>\r\n  <div class=\"export-container\">\r\n    <!-- 导出配置 -->\r\n    <el-card class=\"export-config\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <span>导出配置</span>\r\n        </div>\r\n      </template>\r\n      \r\n      <el-form :model=\"exportForm\" ref=\"exportFormRef\" label-width=\"100px\">\r\n        <!-- 数据范围 -->\r\n        <el-form-item label=\"数据范围\" required>\r\n          <el-radio-group v-model=\"exportForm.range\">\r\n            <el-radio label=\"all\">全部数据</el-radio>\r\n            <el-radio label=\"custom\">自定义筛选</el-radio>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n        \r\n        <!-- 自定义筛选条件 -->\r\n        <template v-if=\"exportForm.range === 'custom'\">\r\n          <el-form-item label=\"关键词\">\r\n            <el-input\r\n              v-model=\"exportForm.keyword\"\r\n              placeholder=\"请输入关键词\"\r\n              clearable\r\n            />\r\n          </el-form-item>\r\n          \r\n          <el-form-item label=\"平台\">\r\n            <el-select\r\n              v-model=\"exportForm.platform\"\r\n              placeholder=\"请选择平台\"\r\n              clearable\r\n            >\r\n              <el-option\r\n                v-for=\"item in platformOptions\"\r\n                :key=\"item.value\"\r\n                :label=\"item.label\"\r\n                :value=\"item.value\"\r\n              />\r\n            </el-select>\r\n          </el-form-item>\r\n          \r\n          <el-form-item label=\"情感倾向\">\r\n            <el-select\r\n              v-model=\"exportForm.sentiment\"\r\n              placeholder=\"请选择情感倾向\"\r\n              clearable\r\n            >\r\n              <el-option\r\n                v-for=\"item in sentimentOptions\"\r\n                :key=\"item.value\"\r\n                :label=\"item.label\"\r\n                :value=\"item.value\"\r\n              />\r\n            </el-select>\r\n          </el-form-item>\r\n          \r\n          <el-form-item label=\"时间范围\">\r\n            <el-date-picker\r\n              v-model=\"exportForm.dateRange\"\r\n              type=\"daterange\"\r\n              range-separator=\"至\"\r\n              start-placeholder=\"开始日期\"\r\n              end-placeholder=\"结束日期\"\r\n              value-format=\"YYYY-MM-DD\"\r\n            />\r\n          </el-form-item>\r\n        </template>\r\n        \r\n        <!-- 导出字段 -->\r\n        <el-form-item label=\"导出字段\" required>\r\n          <el-checkbox-group v-model=\"exportForm.fields\">\r\n            <el-checkbox label=\"platform\">平台</el-checkbox>\r\n            <el-checkbox label=\"content\">内容</el-checkbox>\r\n            <el-checkbox label=\"sentiment\">情感倾向</el-checkbox>\r\n            <el-checkbox label=\"keywords\">关键词</el-checkbox>\r\n            <el-checkbox label=\"publishTime\">发布时间</el-checkbox>\r\n            <el-checkbox label=\"replyCount\">评论数</el-checkbox>\r\n            <el-checkbox label=\"forwardCount\">转发数</el-checkbox>\r\n          </el-checkbox-group>\r\n        </el-form-item>\r\n        \r\n        <!-- 导出格式 -->\r\n        <el-form-item label=\"导出格式\" required>\r\n          <el-radio-group v-model=\"exportForm.format\">\r\n            <el-radio label=\"csv\">CSV</el-radio>\r\n            <el-radio label=\"excel\">Excel</el-radio>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n        \r\n        <!-- 导出按钮 -->\r\n        <el-form-item>\r\n          <el-button\r\n            type=\"primary\"\r\n            :loading=\"exporting\"\r\n            @click=\"handleExport\"\r\n          >\r\n            开始导出\r\n          </el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n    \r\n    <!-- 导出历史 -->\r\n    <el-card class=\"export-history\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <span>导出历史</span>\r\n          <el-button type=\"text\" @click=\"refreshHistory\">刷新</el-button>\r\n        </div>\r\n      </template>\r\n      \r\n      <el-table\r\n        v-loading=\"loading\"\r\n        :data=\"exportHistory\"\r\n        style=\"width: 100%\"\r\n      >\r\n        <el-table-column prop=\"fileName\" label=\"文件名\" />\r\n        <el-table-column prop=\"createTime\" label=\"导出时间\" width=\"180\" />\r\n        <el-table-column prop=\"fileSize\" label=\"文件大小\" width=\"120\" />\r\n        <el-table-column prop=\"status\" label=\"状态\" width=\"100\">\r\n          <template #default=\"{ row }\">\r\n            <el-tag :type=\"row.status === 'success' ? 'success' : 'danger'\">\r\n              {{ row.status === 'success' ? '成功' : '失败' }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\" width=\"120\" fixed=\"right\">\r\n          <template #default=\"{ row }\">\r\n            <el-button\r\n              v-if=\"row.status === 'success'\"\r\n              type=\"text\"\r\n              size=\"small\"\r\n              @click=\"handleDownload(row)\"\r\n            >\r\n              下载\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nconst store = useStore()\r\nconst exportFormRef = ref(null)\r\nconst loading = ref(false)\r\nconst exporting = ref(false)\r\n\r\n// 导出表单数据\r\nconst exportForm = reactive({\r\n  range: 'all',\r\n  keyword: '',\r\n  platform: '',\r\n  sentiment: '',\r\n  dateRange: [],\r\n  fields: ['platform', 'content', 'sentiment', 'keywords', 'publishTime'],\r\n  format: 'excel'\r\n})\r\n\r\n// 平台选项\r\nconst platformOptions = [\r\n  { label: '微博', value: 'weibo' },\r\n  { label: '微信', value: 'wechat' },\r\n  { label: '知乎', value: 'zhihu' },\r\n  { label: 'B站', value: 'bilibili' }\r\n]\r\n\r\n// 情感倾向选项\r\nconst sentimentOptions = [\r\n  { label: '正面', value: 'positive' },\r\n  { label: '中性', value: 'neutral' },\r\n  { label: '负面', value: 'negative' }\r\n]\r\n\r\n// 导出历史数据\r\nconst exportHistory = ref([])\r\n\r\n// 获取导出历史\r\nconst fetchExportHistory = async () => {\r\n  loading.value = true\r\n  try {\r\n    // 这里应该调用获取导出历史的API\r\n    // const data = await store.dispatch('opinion/getExportHistory')\r\n    // exportHistory.value = data\r\n    \r\n    // 模拟数据\r\n    exportHistory.value = [\r\n      {\r\n        fileName: '舆情数据_20240101_20240131.xlsx',\r\n        createTime: '2024-01-31 15:30:00',\r\n        fileSize: '2.5MB',\r\n        status: 'success'\r\n      },\r\n      {\r\n        fileName: '舆情数据_20231201_20231231.xlsx',\r\n        createTime: '2023-12-31 16:45:00',\r\n        fileSize: '3.1MB',\r\n        status: 'success'\r\n      }\r\n    ]\r\n  } catch (error) {\r\n    ElMessage.error('获取导出历史失败')\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 刷新历史记录\r\nconst refreshHistory = () => {\r\n  fetchExportHistory()\r\n}\r\n\r\n// 导出数据\r\nconst handleExport = async () => {\r\n  if (!exportForm.fields.length) {\r\n    ElMessage.warning('请选择导出字段')\r\n    return\r\n  }\r\n  \r\n  exporting.value = true\r\n  try {\r\n    const params = {\r\n      ...exportForm,\r\n      startDate: exportForm.dateRange?.[0],\r\n      endDate: exportForm.dateRange?.[1]\r\n    }\r\n    \r\n    await store.dispatch('opinion/exportOpinions', params)\r\n    ElMessage.success('导出成功')\r\n    refreshHistory()\r\n  } catch (error) {\r\n    ElMessage.error('导出失败')\r\n  } finally {\r\n    exporting.value = false\r\n  }\r\n}\r\n\r\n// 下载文件\r\nconst handleDownload = (row) => {\r\n  // 这里应该调用下载文件的API\r\n  // store.dispatch('opinion/downloadExportFile', row.fileName)\r\n  ElMessage.success('开始下载')\r\n}\r\n\r\n// 初始化\r\nfetchExportHistory()\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.export-container {\r\n  .export-config {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .export-history {\r\n    .card-header {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n    }\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}